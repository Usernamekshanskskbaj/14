import asyncio
import logging
import random
import time
from datetime import datetime
from typing import List, Optional, Set, Callable, Any, Dict
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'masslooker_log_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

try:
    from telethon import TelegramClient, events
    from telethon.errors import ChannelPrivateError, ChatWriteForbiddenError, FloodWaitError, UserNotParticipantError
    from telethon.tl.types import Channel, Chat, MessageMediaPhoto, MessageMediaDocument
    from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest, GetFullChannelRequest
    from telethon.tl.functions.messages import SendReactionRequest, GetAvailableReactionsRequest, GetDiscussionMessageRequest
    from telethon.tl.types import ReactionEmoji, ReactionCustomEmoji
    import g4f
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}")
    raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
masslooking_active = False
shared_client: Optional[TelegramClient] = None
settings = {}
processed_channels: Set[str] = set()
masslooking_progress = {'current_channel': '', 'processed_count': 0}
statistics = {
    'comments_sent': 0,
    'reactions_set': 0,
    'channels_processed': 0,
    'errors': 0,
    'flood_waits': 0,
    'total_flood_wait_time': 0
}

# –ö—Ä—É–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
channel_processing_queue = {}
current_channel_iterator = None
channels_in_rotation = []

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
COMMENT_PROMPT = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FloodWait
FLOOD_WAIT_SETTINGS = {
    'max_retries': 5,
    'max_wait_time': 7200,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (2 —á–∞—Å–∞)
    'enable_exponential_backoff': True,
    'check_interval': 10,  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    'backoff_multiplier': 1.5  # –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff
}

# –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è Telegram
DEFAULT_POSITIVE_REACTIONS = [
    'üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè', 'üòç', 'ü§©', 'üíØ', '‚≠ê',
    'üéâ', 'üôè', 'üí™', 'üëå', '‚ú®', 'üåü', 'üöÄ'
]

def check_bot_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        import bot_interface
        return bot_interface.bot_data.get('is_running', True)
    except:
        return masslooking_active

async def smart_wait(wait_time: int, operation_name: str = "operation") -> bool:
    """–£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff"""
    original_wait_time = wait_time
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    if wait_time > FLOOD_WAIT_SETTINGS['max_wait_time']:
        wait_time = FLOOD_WAIT_SETTINGS['max_wait_time']
        logger.warning(f"FloodWait –¥–ª—è {operation_name}: {original_wait_time}—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {wait_time}—Å")
    
    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ FloodWait –¥–ª—è {operation_name}: {wait_time} —Å–µ–∫—É–Ω–¥")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statistics['flood_waits'] += 1
    statistics['total_flood_wait_time'] += wait_time
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    check_interval = FLOOD_WAIT_SETTINGS['check_interval']
    chunks = wait_time // check_interval
    remainder = wait_time % check_interval
    
    # –û–∂–∏–¥–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for i in range(chunks):
        if not check_bot_running():
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è FloodWait –¥–ª—è {operation_name}")
            return False
        
        progress = (i + 1) * check_interval
        remaining = wait_time - progress
        logger.debug(f"FloodWait {operation_name}: –ø—Ä–æ—à–ª–æ {progress}—Å, –æ—Å—Ç–∞–ª–æ—Å—å {remaining}—Å")
        
        await asyncio.sleep(check_interval)
    
    # –û–∂–∏–¥–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    if remainder > 0:
        if not check_bot_running():
            return False
        await asyncio.sleep(remainder)
    
    logger.info(f"FloodWait –¥–ª—è {operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True

async def handle_flood_wait(func: Callable, *args, operation_name: str = None, max_retries: int = None, **kwargs) -> Any:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ FloodWait –¥–ª—è –ª—é–±—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    if operation_name is None:
        operation_name = func.__name__ if hasattr(func, '__name__') else "operation"
    
    if max_retries is None:
        max_retries = FLOOD_WAIT_SETTINGS['max_retries']
    
    base_delay = 1  # –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    for attempt in range(max_retries):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if not check_bot_running():
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º {operation_name}")
                return None
            
            logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {operation_name}")
            return await func(*args, **kwargs)
            
        except FloodWaitError as e:
            wait_time = e.seconds
            logger.warning(f"FloodWait –ø—Ä–∏ {operation_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {wait_time} —Å–µ–∫—É–Ω–¥")
            
            if attempt < max_retries - 1:
                # –û–∂–∏–¥–∞–µ–º FloodWait
                if not await smart_wait(wait_time, operation_name):
                    logger.info(f"–ü—Ä–µ—Ä—ã–≤–∞–µ–º {operation_name} –∏–∑-–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
                    return None
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ FloodWait
                if FLOOD_WAIT_SETTINGS['enable_exponential_backoff']:
                    extra_delay = base_delay * (FLOOD_WAIT_SETTINGS['backoff_multiplier'] ** attempt)
                    logger.debug(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ FloodWait: {extra_delay:.1f}—Å")
                    await asyncio.sleep(extra_delay)
                
                continue
            else:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {operation_name} –ø–æ—Å–ª–µ FloodWait")
                statistics['errors'] += 1
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {operation_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ–±—ã—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                await asyncio.sleep(random.uniform(1, 3))
                continue
            else:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {operation_name}")
                statistics['errors'] += 1
                return None
    
    return None

def load_comment_prompt():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global COMMENT_PROMPT
    prompt_file = 'prompt_for_generating_comments.txt'
    
    try:
        if not os.path.exists(prompt_file):
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ñ–∞–π–ª {prompt_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            logger.error(error_msg)
            raise FileNotFoundError(error_msg)
        
        with open(prompt_file, 'r', encoding='utf-8') as f:
            COMMENT_PROMPT = f.read().strip()
        
        if not COMMENT_PROMPT:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ñ–∞–π–ª {prompt_file} –ø—É—Å—Ç!"
            logger.error(error_msg)
            raise ValueError(error_msg)
        
        logger.info(f"–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ {prompt_file}")
        return COMMENT_PROMPT
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}"
        logger.error(error_msg)
        raise Exception(error_msg)

async def generate_comment(post_text: str, topics: List[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é GPT-4"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
        if COMMENT_PROMPT is None:
            raise Exception("–ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–≤–∞—Ç—å load_comment_prompt()")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
        topics_text = ', '.join(topics) if topics else '–æ–±—â–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞'
        prompt = COMMENT_PROMPT
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø—Ä–æ–º–ø—Ç–µ
        if '{text_of_the_post}' in prompt:
            prompt = prompt.replace('{text_of_the_post}', post_text[:1000])
        else:
            prompt = prompt + f"\n\n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text[:1000]}"
        
        if '{topics}' in prompt:
            prompt = prompt.replace('{topics}', topics_text)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{"role": "user", "content": prompt}],
            stream=False
        )
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç - —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        comment = response.strip()
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if comment.startswith('"') and comment.endswith('"'):
            comment = comment[1:-1]
        
        if comment.startswith("'") and comment.endswith("'"):
            comment = comment[1:-1]
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment[:50]}...")
        return comment
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        fallback_comments = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç!",
            "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞",
            "–•–æ—Ä–æ—à–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª",
            "–°–æ–≥–ª–∞—Å–µ–Ω —Å –∞–≤—Ç–æ—Ä–æ–º"
        ]
        return random.choice(fallback_comments)

async def get_entity_safe(identifier):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _get_entity():
        return await shared_client.get_entity(identifier)
    
    return await handle_flood_wait(_get_entity, operation_name=f"get_entity({identifier})")

async def get_full_channel_safe(entity):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _get_full_channel():
        return await shared_client(GetFullChannelRequest(entity))
    
    return await handle_flood_wait(_get_full_channel, operation_name=f"get_full_channel({entity.id})")

async def join_channel_safe(entity):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _join_channel():
        return await shared_client(JoinChannelRequest(entity))
    
    return await handle_flood_wait(_join_channel, operation_name=f"join_channel({entity.username or entity.id})")

async def leave_channel_safe(entity):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _leave_channel():
        return await shared_client(LeaveChannelRequest(entity))
    
    return await handle_flood_wait(_leave_channel, operation_name=f"leave_channel({entity.username or entity.id})")

async def send_message_safe(peer, message, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _send_message():
        return await shared_client.send_message(peer, message, **kwargs)
    
    peer_name = getattr(peer, 'username', None) or getattr(peer, 'id', 'unknown')
    return await handle_flood_wait(_send_message, operation_name=f"send_message_to({peer_name})")

async def send_reaction_safe(peer, msg_id, reaction):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _send_reaction():
        return await shared_client(SendReactionRequest(
            peer=peer,
            msg_id=msg_id,
            reaction=[ReactionEmoji(emoticon=reaction)]
        ))
    
    peer_name = getattr(peer, 'username', None) or getattr(peer, 'id', 'unknown')
    return await handle_flood_wait(_send_reaction, operation_name=f"send_reaction_to({peer_name}, {msg_id})")

async def get_discussion_message_safe(peer, msg_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ discussion message —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    async def _get_discussion_message():
        return await shared_client(GetDiscussionMessageRequest(peer=peer, msg_id=msg_id))
    
    peer_name = getattr(peer, 'username', None) or getattr(peer, 'id', 'unknown')
    return await handle_flood_wait(_get_discussion_message, operation_name=f"get_discussion_message({peer_name}, {msg_id})")

async def iter_messages_safe(entity, limit=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    messages = []
    try:
        async for message in shared_client.iter_messages(entity, limit=limit):
            messages.append(message)
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(0.1)
    except FloodWaitError as e:
        logger.warning(f"FloodWait –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e.seconds} —Å–µ–∫—É–Ω–¥")
        if await smart_wait(e.seconds, "iter_messages"):
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
            try:
                async for message in shared_client.iter_messages(entity, limit=limit):
                    messages.append(message)
                    await asyncio.sleep(0.1)
            except Exception as retry_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {retry_error}")
        else:
            logger.info("–ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑-–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    return messages

async def get_channel_available_reactions(entity) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
        full_channel = await get_full_channel_safe(entity)
        if not full_channel:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
            return DEFAULT_POSITIVE_REACTIONS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
        if hasattr(full_channel.full_chat, 'available_reactions'):
            available_reactions = full_channel.full_chat.available_reactions
            
            if available_reactions and hasattr(available_reactions, 'reactions'):
                channel_reactions = []
                for reaction in available_reactions.reactions:
                    if hasattr(reaction, 'emoticon'):
                        emoji = reaction.emoticon
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏
                        if emoji in DEFAULT_POSITIVE_REACTIONS:
                            channel_reactions.append(emoji)
                
                if channel_reactions:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(channel_reactions)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –≤ –∫–∞–Ω–∞–ª–µ")
                    return channel_reactions
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π")
        return DEFAULT_POSITIVE_REACTIONS
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –∫–∞–Ω–∞–ª–∞: {e}")
        return DEFAULT_POSITIVE_REACTIONS

async def add_reaction_to_post(message, channel_username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å—Ç—É —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ is_running
        if not check_bot_running():
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        entity = await get_entity_safe(message.peer_id)
        if not entity:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ
        available_reactions = await get_channel_available_reactions(entity)
        
        if not available_reactions:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –≤ –∫–∞–Ω–∞–ª–µ")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
        reaction = random.choice(available_reactions)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
        result = await send_reaction_safe(message.peer_id, message.id, reaction)
        
        if result is not None:
            logger.info(f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {reaction} –∫ –ø–æ—Å—Ç—É {message.id}")
            statistics['reactions_set'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ bot_interface
            try:
                import bot_interface
                bot_interface.update_statistics(reactions=1)
                bot_interface.add_processed_channel_statistics(channel_username, reaction_added=True)
            except:
                pass
            
            return True
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç {message.id}")
            return False
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        statistics['errors'] += 1
        return False

async def check_post_comments_available(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ—Å—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
        entity = await get_entity_safe(message.peer_id)
        if not entity:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
        full_channel = await get_full_channel_safe(entity)
        if not full_channel:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ linked_chat_id
        if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
            if hasattr(message, 'replies') and message.replies:
                logger.info(f"–ü–æ—Å—Ç {message.id} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
                return True
            else:
                logger.info(f"–ü–æ—Å—Ç {message.id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
                return False
        else:
            logger.info(f"–ö–∞–Ω–∞–ª –Ω–µ –∏–º–µ–µ—Ç –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
            return False
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å—Ç–∞: {e}")
        return False

async def send_comment_to_post(message, comment_text: str, channel_username: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ is_running
        if not check_bot_running():
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –ø–æ—Å—Ç–æ–º
        if not await check_post_comments_available(message):
            logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ—Å—Ç–∞ {message.id}")
            return False
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ—à—å post_id –≤ –∫–∞–Ω–∞–ª–µ (—É –Ω–∞—Å —ç—Ç–æ message.id)
        post_id = message.id
        logger.info(f"–®–∞–≥ 1: Post ID = {post_id}")
        
        # –®–∞–≥ 2: –í—ã–∑—ã–≤–∞–µ—à—å GetDiscussionMessageRequest —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
        try:
            discussion_info = await get_discussion_message_safe(message.peer_id, post_id)
            
            if not discussion_info:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ discussion –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
                return await send_comment_fallback(message, comment_text, channel_username)
            
            logger.info(f"–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ discussion –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º discussion_group –∏ reply_to_msg_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if hasattr(discussion_info, 'messages') and discussion_info.messages:
                discussion_message = discussion_info.messages[0]
                discussion_group = discussion_message.peer_id
                reply_to_msg_id = discussion_message.id
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {discussion_group}")
                logger.info(f"Reply to message ID: {reply_to_msg_id}")
                
                # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply_to=reply_to_msg_id —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
                result = await send_message_safe(
                    discussion_group,
                    comment_text,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                    reply_to=reply_to_msg_id
                )
                
                if result is not None:
                    logger.info(f"–®–∞–≥ 3: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç {post_id}: {comment_text[:50]}...")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    entity = await get_entity_safe(message.peer_id)
                    if entity and hasattr(entity, 'username'):
                        post_link = f"https://t.me/{entity.username}/{post_id}"
                        comment_link = f"https://t.me/c/{str(discussion_group.channel_id)}/{result.id}"
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        try:
                            import bot_interface
                            bot_interface.add_processed_channel_statistics(
                                channel_username, 
                                comment_link=comment_link, 
                                post_link=post_link
                            )
                        except:
                            pass
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
                    return False
                
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ discussion message –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
                return await send_comment_fallback(message, comment_text, channel_username)
                
        except Exception as discussion_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GetDiscussionMessageRequest: {discussion_error}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
            return await send_comment_fallback(message, comment_text, channel_username)
        
        statistics['comments_sent'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ bot_interface
        try:
            import bot_interface
            bot_interface.update_statistics(comments=1)
        except:
            pass
        
        return True
        
    except Exception as e:
        error_text = str(e)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É "You join the discussion group before commenting"
        if "You join the discussion group before commenting" in error_text:
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, –ø—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                entity = await get_entity_safe(message.peer_id)
                if not entity:
                    return False
                
                full_channel = await get_full_channel_safe(entity)
                if not full_channel:
                    return False
                
                if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                    discussion_group = await get_entity_safe(full_channel.full_chat.linked_chat_id)
                    if discussion_group:
                        # –í—Å—Ç—É–ø–∞–µ–º –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
                        join_result = await join_channel_safe(discussion_group)
                        if join_result is not None:
                            logger.info(f"–í—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π {discussion_group.title}")
                            await asyncio.sleep(2)
                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                            return await send_comment_to_post(message, comment_text, channel_username)
                        else:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
                            return False
                else:
                    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è")
                    return False
                    
            except Exception as join_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {join_error}")
                return False
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            statistics['errors'] += 1
            return False

async def send_comment_fallback(message, comment_text: str, channel_username: str):
    """Fallback –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞) —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait"""
    try:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
        entity = await get_entity_safe(message.peer_id)
        if not entity:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
        full_channel = await get_full_channel_safe(entity)
        if not full_channel:
            return False
        
        if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
            discussion_group = await get_entity_safe(full_channel.full_chat.linked_chat_id)
            if discussion_group:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
                result = await send_message_safe(discussion_group, comment_text)
                if result is not None:
                    logger.info(f"Fallback: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {comment_text[:50]}...")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    try:
                        import bot_interface
                        bot_interface.add_processed_channel_statistics(channel_username, comment_link="fallback_method")
                    except:
                        pass
                    
                    return True
                else:
                    return False
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–∞–Ω–∞–ª
            result = await send_message_safe(message.peer_id, comment_text, comment_to=message.id)
            if result is not None:
                logger.info(f"Fallback: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–∞–Ω–∞–ª: {comment_text[:50]}...")
                return True
            else:
                return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback –º–µ—Ç–æ–¥–µ: {e}")
        return False

async def save_masslooking_progress():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import db
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞–∫–µ—Ç–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        progress_data = [
            ('masslooking_progress', masslooking_progress),
            ('processed_channels', list(processed_channels)),
            ('channel_processing_queue', channel_processing_queue)
        ]
        
        for key, value in progress_data:
            await db.save_bot_state(key, value)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {e}")

async def load_masslooking_progress():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global masslooking_progress, processed_channels, channel_processing_queue
    try:
        from database import db
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞
        saved_progress = await db.load_bot_state('masslooking_progress', {})
        if saved_progress:
            masslooking_progress.update(saved_progress)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        saved_channels = await db.load_bot_state('processed_channels', [])
        if saved_channels:
            processed_channels.update(saved_channels)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        saved_queue = await db.load_bot_state('channel_processing_queue', {})
        if saved_queue:
            channel_processing_queue.update(saved_queue)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {masslooking_progress}")
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(processed_channels)}")
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(channel_processing_queue)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {e}")

async def prepare_channel_for_processing(username: str):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã event loop"""
    try:
        if not username.startswith('@'):
            username = '@' + username
        
        logger.info(f"–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª {username} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ event loop —á—Ç–æ –∏ shared_client
        if not shared_client:
            logger.error("Shared client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        entity = await get_entity_safe(username)
        if not entity:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {username}")
            return False
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        delay_range = settings.get('delay_range', (20, 1000))
        if delay_range != (0, 0):
            join_delay = random.uniform(delay_range[0], delay_range[1])
            logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ {join_delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ {username}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
            delay_chunks = int(join_delay)
            remaining_delay = join_delay - delay_chunks
            
            for _ in range(delay_chunks):
                if not check_bot_running():
                    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
                    return False
                await asyncio.sleep(1)
            
            if remaining_delay > 0:
                await asyncio.sleep(remaining_delay)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        try:
            if hasattr(entity, 'left') and entity.left:
                join_result = await join_channel_safe(entity)
                if join_result is not None:
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {username}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    if delay_range != (0, 0):
                        post_join_delay = random.uniform(2, 5)
                        await asyncio.sleep(post_join_delay)
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {username}")
            else:
                logger.info(f"–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {username}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {username}: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        posts_range = settings.get('posts_range', (1, 5))
        if posts_range[0] != posts_range[1]:
            posts_count = random.randint(posts_range[0], posts_range[1])
        else:
            posts_count = posts_range[0]
        
        logger.info(f"–ö–∞–Ω–∞–ª {username}: –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {posts_count} –ø–æ—Å—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        messages = await iter_messages_safe(entity, limit=posts_count * 3)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        valid_messages = []
        for message in messages:
            if message.text and len(message.text.strip()) >= 10:
                valid_messages.append(message)
                if len(valid_messages) >= posts_count:
                    break
        
        if not valid_messages:
            logger.warning(f"–í –∫–∞–Ω–∞–ª–µ {username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        channel_processing_queue[username] = {
            'posts_processed': 0,
            'total_posts': len(valid_messages),
            'messages': valid_messages,
            'entity': entity
        }
        
        logger.info(f"–ö–∞–Ω–∞–ª {username} –≥–æ—Ç–æ–≤: {len(valid_messages)} –ø–æ—Å—Ç–æ–≤")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {username}: {e}")
        return False

async def process_single_post_from_channel(username: str) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ (–∫—Ä—É–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)"""
    try:
        if username not in channel_processing_queue:
            logger.warning(f"–ö–∞–Ω–∞–ª {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
        channel_data = channel_processing_queue[username]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if channel_data['posts_processed'] >= channel_data['total_posts']:
            logger.info(f"–í—Å–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ {username} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        current_post_index = channel_data['posts_processed']
        message = channel_data['messages'][current_post_index]
        entity = channel_data['entity']
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç {current_post_index + 1}/{channel_data['total_posts']} –≤ –∫–∞–Ω–∞–ª–µ {username}")
        
        topics = settings.get('topics', [])
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –ø–æ—Å—Ç–æ–º
            post_supports_comments = await check_post_comments_available(message)
            
            if post_supports_comments:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {message.id}")
                comment = await generate_comment(message.text, topics)
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {message.id}: {comment[:50]}...")
                comment_sent = await send_comment_to_post(message, comment, username)
                
                if comment_sent:
                    logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ {message.id}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏ —Ä–µ–∞–∫—Ü–∏–µ–π
                    delay = random.uniform(2, 8)
                    await asyncio.sleep(delay)
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {message.id}")
            else:
                logger.info(f"–ü–æ—Å—Ç {message.id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
            # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é (–≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é)
            logger.info(f"–°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç {message.id}")
            reaction_result = await add_reaction_to_post(message, username)
            if reaction_result:
                logger.info(f"–†–µ–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—Å—Ç {message.id}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç {message.id}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            channel_processing_queue[username]['posts_processed'] += 1
            
            logger.info(f"–ü–æ—Å—Ç {current_post_index + 1}/{channel_data['total_posts']} –≤ –∫–∞–Ω–∞–ª–µ {username} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await save_masslooking_progress()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {username}: {e}")
            statistics['errors'] += 1
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è
            channel_processing_queue[username]['posts_processed'] += 1
            return False
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {username}: {e}")
        return False

async def finalize_channel_processing(username: str):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞: –æ—Ç–ø–∏—Å–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞"""
    try:
        if username in channel_processing_queue:
            channel_data = channel_processing_queue[username]
            entity = channel_data['entity']
            
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞
            leave_result = await leave_channel_safe(entity)
            if leave_result is not None:
                logger.info(f"–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ {username}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ {username}")
            
            # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            del channel_processing_queue[username]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            processed_channels.add(username)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            statistics['channels_processed'] += 1
            masslooking_progress['processed_count'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ bot_interface
            try:
                import bot_interface
                bot_interface.update_statistics(channels=1)
            except:
                pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await save_masslooking_progress()
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ {username} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {username}: {e}")

async def masslooking_worker():
    """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ —Å –∫—Ä—É–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤"""
    global masslooking_active, current_channel_iterator, channels_in_rotation, settings
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await load_masslooking_progress()
    logger.info("–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω (–∫—Ä—É–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)")
    
    while masslooking_active:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ is_running
            if not check_bot_running():
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤ bot_interface, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Å—Å–ª—É–∫–∏–Ω–≥")
                masslooking_active = False
                break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            try:
                import bot_interface
                current_settings = bot_interface.get_bot_settings()
                if current_settings != settings:
                    settings.update(current_settings)
                    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–æ—Ç–∞—Ü–∏–∏
            channels_in_rotation = list(channel_processing_queue.keys())
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –∂–¥–µ–º –Ω–æ–≤—ã–µ
            if not channels_in_rotation:
                logger.debug("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–µ–º...")
                await asyncio.sleep(5)
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if current_channel_iterator is None:
                current_channel_iterator = iter(channels_in_rotation)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª –∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏
                current_channel = next(current_channel_iterator)
            except StopIteration:
                # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π (–Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞)
                current_channel_iterator = iter(channels_in_rotation)
                if channels_in_rotation:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç
                    current_channel = next(current_channel_iterator)
                else:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –≤—Å–µ –µ—â–µ –≤ –æ—á–µ—Ä–µ–¥–∏
            if current_channel not in channel_processing_queue:
                # –ö–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä
                current_channel_iterator = None
                continue
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞: {current_channel}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
            max_channels = settings.get('max_channels', 150)
            total_channels = len(processed_channels) + len(channel_processing_queue)
            if max_channels != float('inf') and total_channels >= max_channels:
                logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤: {max_channels} (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_channels)}, –≤ –æ—á–µ—Ä–µ–¥–∏: {len(channel_processing_queue)})")
                await asyncio.sleep(60)
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            post_processed = await process_single_post_from_channel(current_channel)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if current_channel in channel_processing_queue:
                channel_data = channel_processing_queue[current_channel]
                if channel_data['posts_processed'] >= channel_data['total_posts']:
                    logger.info(f"–ö–∞–Ω–∞–ª {current_channel} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    await finalize_channel_processing(current_channel)
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    current_channel_iterator = None
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            delay_range = settings.get('delay_range', (20, 1000))
            if delay_range != (0, 0):
                action_delay = random.uniform(delay_range[0], delay_range[1])
                logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ {action_delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ —á–∞—Å—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
                delay_chunks = int(action_delay)
                remaining_delay = action_delay - delay_chunks
                
                for _ in range(delay_chunks):
                    if not check_bot_running():
                        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏")
                        masslooking_active = False
                        break
                    await asyncio.sleep(1)
                
                if remaining_delay > 0 and masslooking_active:
                    await asyncio.sleep(remaining_delay)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(30)
    
    logger.info("–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

async def add_channel_to_queue(username: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    max_channels = settings.get('max_channels', 150)
    total_channels = len(processed_channels) + len(channel_processing_queue)
    
    if max_channels != float('inf') and total_channels >= max_channels:
        logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ ({max_channels}), –∫–∞–Ω–∞–ª {username} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
        return
    
    if username not in processed_channels and username not in channel_processing_queue:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        success = await prepare_channel_for_processing(username)
        if success:
            logger.info(f"–ö–∞–Ω–∞–ª {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∫—Ä—É–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ bot_interface
            try:
                import bot_interface
                queue_list = list(channel_processing_queue.keys())
                bot_interface.update_queue_statistics(queue_list)
            except:
                pass
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª {username} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    else:
        logger.info(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

async def start_masslooking(telegram_client: TelegramClient, masslooking_settings: dict):
    """–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ —Å –µ–¥–∏–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º"""
    global masslooking_active, shared_client, settings
    
    if masslooking_active:
        logger.warning("–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ —Å –∫—Ä—É–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    try:
        load_comment_prompt()
    except Exception as e:
        error_msg = f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç! {e}"
        logger.error(error_msg)
        raise Exception(error_msg)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –µ–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    shared_client = telegram_client
    settings = masslooking_settings.copy()
    masslooking_active = True
    
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞: {settings}")
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FloodWait: {FLOOD_WAIT_SETTINGS}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    asyncio.create_task(masslooking_worker())
    
    logger.info("–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å –∫—Ä—É–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait")

async def stop_masslooking():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞"""
    global masslooking_active, current_channel_iterator, channel_processing_queue
    
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞...")
    masslooking_active = False
    current_channel_iterator = None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    await save_masslooking_progress()
    
    logger.info(f"–ú–∞—Å—Å–ª—É–∫–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(channel_processing_queue)} –∫–∞–Ω–∞–ª–æ–≤")

def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Å–ª—É–∫–∏–Ω–≥–∞ –≤–∫–ª—é—á–∞—è FloodWait"""
    avg_flood_wait = 0
    if statistics['flood_waits'] > 0:
        avg_flood_wait = statistics['total_flood_wait_time'] / statistics['flood_waits']
    
    return {
        **statistics,
        'progress': masslooking_progress.copy(),
        'queue_size': len(channel_processing_queue),
        'channels_in_rotation': len(channel_processing_queue),
        'average_flood_wait_time': round(avg_flood_wait, 2),
        'flood_wait_settings': FLOOD_WAIT_SETTINGS.copy()
    }

def reset_statistics():
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    global statistics, masslooking_progress
    statistics = {
        'comments_sent': 0,
        'reactions_set': 0,
        'channels_processed': 0,
        'errors': 0,
        'flood_waits': 0,
        'total_flood_wait_time': 0
    }
    masslooking_progress = {'current_channel': '', 'processed_count': 0}

def update_flood_wait_settings(new_settings: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ FloodWait"""
    global FLOOD_WAIT_SETTINGS
    FLOOD_WAIT_SETTINGS.update(new_settings)
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FloodWait –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {FLOOD_WAIT_SETTINGS}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è"""
    # –≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("–ú–æ–¥—É–ª—å masslooker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –∫—Ä—É–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait")
    print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ start_masslooking() –∏ add_channel_to_queue()")
    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FloodWait: {FLOOD_WAIT_SETTINGS}")

if __name__ == "__main__":
    asyncio.run(main())